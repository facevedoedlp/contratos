trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  deployPath: '/var/www/contratos'
  serverIP: '172.31.8.73'
  sshUser: 'ec2-user'
  sshKey: '$(SSH_PRIVATE_KEY)'

stages:
- stage: Build
  displayName: 'Build .NET Core API'
  jobs:
  - job: Build
    displayName: 'Compile and Publish'
    steps:
    - checkout: self   # Forzar el checkout del repositorio

    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Core Project'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Upload Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to AWS Linux Server'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Copy and Deploy to AWS'
    steps:
    - checkout: none   # No es necesario hacer checkout aquÃ­

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: Bash@3
      displayName: 'Copy Files and Restart Service'
      inputs:
        targetType: 'inline'
        script: |
          echo "Starting deployment..."

          # Crear la clave privada temporal
          echo "$(sshKey)" > private_key.pem
          chmod 600 private_key.pem

          # Copiar archivos al servidor
          scp -o StrictHostKeyChecking=no -i private_key.pem -r $(System.ArtifactsDirectory)/drop/* $(sshUser)@$(serverIP):$(deployPath)

          # Reiniciar el servicio
          ssh -o StrictHostKeyChecking=no -i private_key.pem $(sshUser)@$(serverIP) << 'EOF'
          sudo systemctl daemon-reload
          sudo systemctl restart contratos.service
          EOF

          # Limpiar clave temporal
          rm -f private_key.pem
          echo "Despliegue completado correctamente."
