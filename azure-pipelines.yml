trigger:
- main

pool:
  name: Default          # Pool donde estÃ¡ el agente autohospedado
  demands:
    - Agent.Name -equals ip-172-31-8-73  # Nombre del agente

variables:
  buildConfiguration: 'Release'
  deployPath: '/var/www/contratos'        # Ruta en el servidor AWS
  serverIP: '172.31.8.73'                 # IP del servidor
  sshUser: 'ec2-user'                     # Usuario SSH
  sshKey: '$(SSH_PRIVATE_KEY)'            # Clave SSH desde variables secretas

stages:
- stage: Build
  displayName: 'Build .NET Core API'
  jobs:
  - job: Build
    displayName: 'Compile and Publish'
    steps:
    - checkout: self
      displayName: 'Checkout Code'

    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Core Project'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Upload Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: 'Deploy to AWS Linux Server'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Copy Files and Restart Service'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |
        echo "Starting deployment..."

        # Crear clave privada temporal
        echo "Creando clave privada temporal..."
        echo "$(sshKey)" > private_key.pem
        chmod 600 private_key.pem

        # Copiar archivos directamente a /var/www/contratos
        echo "Copiando archivos..."
        scp -o StrictHostKeyChecking=no -i private_key.pem -r $(System.ArtifactsDirectory)/drop/* $(sshUser)@$(serverIP):$(deployPath)

        # Descomprimir archivos en el servidor si es necesario
        ssh -o StrictHostKeyChecking=no -i private_key.pem $(sshUser)@$(serverIP) << 'EOF'
        echo "Descomprimiendo archivos..."
        sudo unzip -o $(deployPath)/Zubeldia.zip -d $(deployPath)
        sudo systemctl daemon-reload
        sudo systemctl restart contratos.service
        EOF

        # Limpiar clave temporal
        rm -f private_key.pem
        echo "Despliegue completado correctamente."
      displayName: 'Deploy and Restart Service'
